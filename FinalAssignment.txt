Final Assignment
SQL for Data Science By University of California, Davis 
Submitted by: Jenny Mayo
Date: 6-15-2020 

Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10,000
ii. Business table = 10,000
iii. Category table = 10,000
iv. Checkin table = 10,000
v. elite_years table = 10,000
vi. friend table = 10,000
vii. hours table = 10,000
viii. photo table = 10,000
ix. review table = 10,000
x. tip table = 10,000
xi. user table = 10,000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10,000
ii. Hours = 1,562 (business_id)
iii. Category = 2,643 (business_id)
iv. Attribute = 1,115 (business_id)
v. Review = 10,000
vi. Checkin = 493 (business_id)
vii. Photo = 10,000
viii. Tip = 3,979 (business_id)
ix. User = 10,000
x. Friend = 11 (user_id)
xi. Elite_years = 2,780 (user_id)

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
	
	SQL code used to arrive at answer:

	SELECT *
	FROM user
	WHERE NULL
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:	1	max:	5	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:	2000	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
	SELECT sum(review_count) AS reviews
	,city
	FROM business
	GROUP BY city
	ORDER BY reviews DESC
	
	
	Copy and Paste the Result Below:

	+---------+-----------------+
	| reviews | city            |
	+---------+-----------------+
	|   82854 | Las Vegas       |
	|   34503 | Phoenix         |
	|   24113 | Toronto         |
	|   20614 | Scottsdale      |
	|   12523 | Charlotte       |
	|   10871 | Henderson       |
	|   10504 | Tempe           |
	|    9798 | Pittsburgh      |
	|    9448 | Montréal        |
	|    8112 | Chandler        |
	|    6875 | Mesa            |
	|    6380 | Gilbert         |
	|    5593 | Cleveland       |
	|    5265 | Madison         |
	|    4406 | Glendale        |
	|    3814 | Mississauga     |
	|    2792 | Edinburgh       |
	|    2624 | Peoria          |
	|    2438 | North Las Vegas |
	|    2352 | Markham         |
	|    2029 | Champaign       |
	|    1849 | Stuttgart       |
	|    1520 | Surprise        |
	|    1465 | Lakewood        |
	|    1155 | Goodyear        |
	+---------+-----------------+
	(Output limit exceeded, 25 of 362 total rows shown)
	

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

	SELECT stars AS 'star rating'
		,sum(review_count) AS count
	FROM business
	WHERE city = 'Avon'
	GROUP BY stars


Copy and Paste the Resulting Table Below (2 columns – star rating and count):

	+-------------+-------+
	| star rating | count |
	+-------------+-------+
	|         1.5 |    10 |
	|         2.5 |     6 |
	|         3.5 |    88 |
	|         4.0 |    21 |
	|         4.5 |    31 |
	|         5.0 |     3 |
	+-------------+-------+

ii. Beachwood

SQL code used to arrive at answer:

	SELECT stars AS 'star rating'
		,sum(review_count) AS count
	FROM business
	WHERE city = 'Beachwood'
	GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
		
	+-------------+-------+
	| star rating | count |
	+-------------+-------+
	|         2.0 |     8 |
	|         2.5 |     3 |
	|         3.0 |    11 |
	|         3.5 |     6 |
	|         4.0 |    69 |
	|         4.5 |    17 |
	|         5.0 |    23 |
	+-------------+-------+


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
	SELECT name
		,review_count
	FROM user
	ORDER BY review_count DESC
	LIMIT 3

	Copy and Paste the Result Below:
		
	+-----------+--------------+
	| name      | review_count |
	+-----------+--------------+
	| Gerald    |         2000 |
	| Sara      |         1629 |
	| Yuri      |         1339 |
	+-----------+--------------+



8. Does posting more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
From looking at the number of reviews and fans per user by descending order, no noticeable pattern is shown between the two variables. The user with the largest number of fans (503) only has 609 reviews, whereas the user with the largest number of reviews (2000) has just 253 fans. (From the Discussion Forum, it was noted that calculating a correlation coefficient is not necessary for this question, only a qualitative observation is needed.)


	SELECT name
	,review_count
		,fans
	FROM user
	ORDER BY fans DESC

	+-----------+--------------+------+
	| name      | review_count | fans |
	+-----------+--------------+------+
	| Amy       |          609 |  503 |
	| Mimi      |          968 |  497 |
	| Harald    |         1153 |  311 |
	| Gerald    |         2000 |  253 |
	| Christine |          930 |  173 |
	| Lisa      |          813 |  159 |
	| Cat       |          377 |  133 |
	| William   |         1215 |  126 |
	| Fran      |          862 |  124 |
	| Lissa     |          834 |  120 |
	| Mark      |          861 |  115 |
	| Tiffany   |          408 |  111 |
	| bernice   |          255 |  105 |
	| Roanna    |         1039 |  104 |
	| Angela    |          694 |  101 |
	| .Hon      |         1246 |  101 |
	| Ben       |          307 |   96 |
	| Linda     |          584 |   89 |
	| Christina |          842 |   85 |
	| Jessica   |          220 |   84 |
	| Greg      |          408 |   81 |
	| Nieves    |          178 |   80 |
	| Sui       |          754 |   78 |
	| Yuri      |         1339 |   76 |
	| Nicole    |          161 |   73 |
	+-----------+--------------+------+
	(Output limit exceeded, 25 of 10000 total rows shown)

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: Love: The number of reviews containing the word 'love' is 1780, and for the word 'hate,' it shows 232 records. 

	
	SQL code used to arrive at answer:

	SELECT count(TEXT)
	FROM review
	WHERE TEXT LIKE '%love%'

	SELECT count(TEXT)
	FROM review
	WHERE TEXT LIKE '%hate%'

	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
	SELECT fans
		,name
	FROM user
	ORDER BY fans DESC limit 10
	
	Copy and Paste the Result Below:

	+------+-----------+
	| fans | name      |
	+------+-----------+
	|  503 | Amy       |
	|  497 | Mimi      |
	|  311 | Harald    |
	|  253 | Gerald    |
	|  173 | Christine |
	|  159 | Lisa      |
	|  133 | Cat       |
	|  126 | William   |
	|  124 | Fran      |
	|  120 | Lissa     |
	+------+-----------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?

Hours of operation vary by day of the week, and by restaurant. There seems to be no clear pattern in business hours between the low (2-3 stars) and high (4-5 stars) rated restuarants.
 
	SQL code used for analysis:

		SELECT B.name
			,B.stars
			,CASE 
				WHEN B.stars BETWEEN 2
						AND 3
					THEN 'low'
				WHEN B.stars BETWEEN 4
						AND 5
					THEN 'high'
				ELSE 'excluded'
				END AS star_rating
			,H.hours
		FROM hours H
		INNER JOIN business B ON H.business_id = B.id
		INNER JOIN category C ON C.business_id = B.id
		WHERE (
				B.city = 'Toronto'
				AND C.category = 'Restaurants'
				)
			AND star_rating = 'high'


	+-------------+-------+-------------+-----------------------+
	| name        | stars | star_rating | hours                 |
	+-------------+-------+-------------+-----------------------+
	| Cabin Fever |   4.5 | high        | Monday|16:00-2:00     |
	| Cabin Fever |   4.5 | high        | Tuesday|18:00-2:00    |
	| Cabin Fever |   4.5 | high        | Friday|18:00-2:00     |
	| Cabin Fever |   4.5 | high        | Wednesday|18:00-2:00  |
	| Cabin Fever |   4.5 | high        | Thursday|18:00-2:00   |
	| Cabin Fever |   4.5 | high        | Sunday|16:00-2:00     |
	| Cabin Fever |   4.5 | high        | Saturday|16:00-2:00   |
	| Sushi Osaka |   4.5 | high        | Monday|11:00-23:00    |
	| Sushi Osaka |   4.5 | high        | Tuesday|11:00-23:00   |
	| Sushi Osaka |   4.5 | high        | Friday|11:00-23:00    |
	| Sushi Osaka |   4.5 | high        | Wednesday|11:00-23:00 |
	| Sushi Osaka |   4.5 | high        | Thursday|11:00-23:00  |
	| Sushi Osaka |   4.5 | high        | Sunday|14:00-23:00    |
	| Sushi Osaka |   4.5 | high        | Saturday|11:00-23:00  |
	| Edulis      |   4.0 | high        | Sunday|12:00-16:00    |
	| Edulis      |   4.0 | high        | Friday|18:00-23:00    |
	| Edulis      |   4.0 | high        | Wednesday|18:00-23:00 |
	| Edulis      |   4.0 | high        | Thursday|18:00-23:00  |
	| Edulis      |   4.0 | high        | Saturday|18:00-23:00  |
	+-------------+-------+-------------+-----------------------+


		SELECT B.name
			,B.stars
			,CASE 
				WHEN B.stars BETWEEN 2
						AND 3
					THEN 'low'
				WHEN B.stars BETWEEN 4
						AND 5
					THEN 'high'
				ELSE 'excluded'
				END AS star_rating
			,H.hours
		FROM hours H
		INNER JOIN business B ON H.business_id = B.id
		INNER JOIN category C ON C.business_id = B.id
		WHERE (
				B.city = 'Toronto'
				AND C.category = 'Restaurants'
				)
			AND star_rating = 'low'


	+------------------+-------+-------------+-----------------------+
	| name             | stars | star_rating | hours                 |
	+------------------+-------+-------------+-----------------------+
	| Big Smoke Burger |   3.0 | low         | Monday|10:30-21:00    |
	| Big Smoke Burger |   3.0 | low         | Tuesday|10:30-21:00   |
	| Big Smoke Burger |   3.0 | low         | Friday|10:30-21:00    |
	| Big Smoke Burger |   3.0 | low         | Wednesday|10:30-21:00 |
	| Big Smoke Burger |   3.0 | low         | Thursday|10:30-21:00  |
	| Big Smoke Burger |   3.0 | low         | Sunday|11:00-19:00    |
	| Big Smoke Burger |   3.0 | low         | Saturday|10:30-21:00  |
	| 99 Cent Sushi    |   2.0 | low         | Monday|11:00-23:00    |
	| 99 Cent Sushi    |   2.0 | low         | Tuesday|11:00-23:00   |
	| 99 Cent Sushi    |   2.0 | low         | Friday|11:00-23:00    |
	| 99 Cent Sushi    |   2.0 | low         | Wednesday|11:00-23:00 |
	| 99 Cent Sushi    |   2.0 | low         | Thursday|11:00-23:00  |
	| 99 Cent Sushi    |   2.0 | low         | Sunday|11:00-23:00    |
	| 99 Cent Sushi    |   2.0 | low         | Saturday|11:00-23:00  |
	| Pizzaiolo        |   3.0 | low         | Monday|9:00-23:00     |
	| Pizzaiolo        |   3.0 | low         | Tuesday|9:00-23:00    |
	| Pizzaiolo        |   3.0 | low         | Friday|9:00-4:00      |
	| Pizzaiolo        |   3.0 | low         | Wednesday|9:00-23:00  |
	| Pizzaiolo        |   3.0 | low         | Thursday|9:00-23:00   |
	| Pizzaiolo        |   3.0 | low         | Sunday|10:00-23:00    |
	| Pizzaiolo        |   3.0 | low         | Saturday|10:00-4:00   |
	+------------------+-------+-------------+-----------------------+



ii. Do the two groups you chose to analyze have a different number of reviews?

The restaurants with high star ratings (4 or 5) generally have a larger number of reviews, averaging 41, whereas those with low star ratings (2 or 3) have an average of 29 reviews.

	SQL code used for analysis:

        	 SELECT CASE 
				WHEN B.stars BETWEEN 2
						AND 3
					THEN 'low'
				WHEN B.stars BETWEEN 4
						AND 5
					THEN 'high'
				ELSE 'excluded'
				END AS star_rating
			,avg(B.review_count) AS 'average number of reviews'
		FROM business B
		INNER JOIN category C ON C.business_id = B.id
		WHERE (
				B.city = 'Toronto'
				AND C.category = 'Restaurants'
				)
		GROUP BY star_rating
		ORDER BY B.review_count DESC
         

	+-------------+---------------------------+
	| star_rating | average number of reviews |
	+-------------+---------------------------+
	| high        |                      41.2 |
	| low         |             28.6666666667 |
	| excluded    |                       3.5 |
	+-------------+---------------------------+


iii. Are you able to infer anything from the location data provided between these two groups? Explain.

Two out of the three restaurants located in the Downtown Core neighborhood have low star ratings (2 or 3). Restaurants with high star ratings (4 or 5) seem to be located in different parts of the city.  

	SQL code used for analysis:

		SELECT B.name
			,B.neighborhood
			,B.postal_code
			,CASE 
				WHEN B.stars BETWEEN 2
						AND 3
					THEN 'low'
				WHEN B.stars BETWEEN 4
						AND 5
					THEN 'high'
				ELSE 'excluded'
				END AS star_rating
		FROM business B
		INNER JOIN category C ON C.business_id = B.id
		WHERE (
				B.city = 'Toronto'
				AND C.category = 'Restaurants'
				)
		ORDER BY star_rating DESC


	+--------------------+------------------------+-------------+-------------+
	| name               | neighborhood           | postal_code | star_rating |
	+--------------------+------------------------+-------------+-------------+
	| Big Smoke Burger   | Downtown Core          | M4B 2L9     | low         |
	| 99 Cent Sushi      | Downtown Core          | M5B 2E5     | low         |
	| Pizzaiolo          | Entertainment District | M5H 1X6     | low         |
	| Mama Mia           |                        | M6C 1B6     | high        |
	| Cabin Fever        | High Park              | M6P 1A6     | high        |
	| Sushi Osaka        | Etobicoke              | M9A 1C2     | high        |
	| Naniwa-Taro        | Willowdale             | M2N 5R6     | high        |
	| Edulis             | Niagara                | M5V         | high        |
	| Royal Dumpling     | Willowdale             | M2N 7A1     | excluded    |
	| The Kosher Gourmet |                        | M6B         | excluded    |
	+--------------------+------------------------+-------------+-------------+
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: Businesses that are currently closed have an average star rating of 3.0, which is 0.5 points lower than the average rating of the businesses that are operating. 
         
         
ii. Difference 2: Businesses that are currently closed have 7 reviews on average, compared to 36 for the businesses that are open. 
         
        
	SQL code used for analysis:

		SELECT B.is_open
			,avg(B.stars) AS average_rating
			,avg(B.review_count) AS average_reviews
		FROM business B
		INNER JOIN category C ON C.business_id = B.id
		WHERE (
			B.city = 'Toronto'
			AND C.category = 'Restaurants'
			)
		GROUP BY is_open

	
	+---------+----------------+-----------------+
	| is_open | average_rating | average_reviews |
	+---------+----------------+-----------------+
	|       0 |            3.0 |             6.5 |
	|       1 |            3.5 |           35.75 |
	+---------+----------------+-----------------+


3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do: 

Discover if the length of membership on Yelp correlates with the number of fans and reviews. The hypothesis is that the longer one has been a user, the more number of reviews and fans.
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data: 

To determine the length of membership, we'll look at the variable 'yelping_since' in the 'user' table, and parse out the number of years users having been using Yelp. Then the number of years will be grouped, and the average number of reviews and fans (also found in the 'user' table) will be compared by group. 
                           
                  
iii. Output of your finished dataset:

	+---------------+---------------------------+------------------------+
	| YelpingLength | Average Number of Reviews | Average Number of Fans |
	+---------------+---------------------------+------------------------+
	| <5 yrs        |             6.77551020408 |         0.228070175439 |
	| 6-10 yrs      |             22.2748152907 |          1.23193061356 |
	| 11+ yrs       |             87.0417940877 |          6.71661569827 |
	+---------------+---------------------------+------------------------+
         
	The hypothesis is confirmed. 

         
iv. Provide the SQL code you used to create your final dataset:


	SELECT CASE 
			WHEN mem_yr BETWEEN 0
					AND 5
				THEN '<5 yrs'
			WHEN mem_yr BETWEEN 6
					AND 10
				THEN '6-10 yrs'
			WHEN mem_yr BETWEEN 11
					AND 15
				THEN '11+ yrs'
			END AS YelpingLength
		,avg(review_count) AS 'Average Number of Reviews'
		,avg(fans) 'Average Number of Fans'
	FROM (
		SELECT *
			,strftime('%Y', 'now') - strftime('%Y', yelping_since) AS mem_yr
		FROM user
		)
	GROUP BY YelpingLength
	ORDER BY YelpingLength DESC

